import datetime
import time
from pathlib import Path

from model import *
from langchain.document_loaders import TextLoader, PyPDFLoader, YoutubeAudioLoader, UnstructuredPowerPointLoader, UnstructuredWordDocumentLoader, AssemblyAIAudioTranscriptLoader


class MainController:
    def __init__(
        self
    ) -> None:
        self.api_key = ""
    

    def set_api_key(
        self, 
        api_key: str
    ) -> None:
        self.api_key = api_key
        self.rag_model = RAGModel(self.api_key)
        self.db_model = DatabaseModel(self.api_key)
        self._report("API key setup completed.")


    def upload_file(
        self, 
        collection_name: str, 
        file_path: str, 
        can_extract_images:bool
    ) -> None:
        """
        PyPDFLoader: .pdf
        TextLoader: .txt
        AssemblyAIAudioTranscriptLoader: .mp3 | .mp4 |
        YoutubeAudioLoader: [youtube_ulr]
        UnstructuredPowerPointLoader: .pptx
        UnstructuredWordDocumentLoader: .docx
        """
        self._report(f"{collection_name} {file_path}: Loading file")
        loader = PyPDFLoader(file_path, extract_images=can_extract_images)
        data = self.db_model.load(loader)

        self._report(f"{collection_name} {file_path}: Splitting data")
        chunks = self.db_model.split(data)

        self._report(f"{collection_name} {file_path}: Storing chunks")
        self.db_model.store(collection_name, chunks)
        self._report(f"{collection_name} {file_path}: Upload completed")
    

    def get_response(
        self, 
        collection_name: str, 
        query: str, 
        prompt:str
    ) -> str:
        """Get the response generated by the model."""
        query = f"###\nPrompt:{prompt}\n###\n{query}" if prompt else query
        self._report(f"{collection_name}: generating response...")
        start = time.time()
        response = self.rag_model.generate_response(collection_name, query)
        end = time.time()
        self._report(f"{collection_name}: response generated, spent {end - start:.4f}s")
        return response


    def change_model(
        self, 
        model_name: str
    ) -> None:
        """Select the model currently in use."""
        self.rag_model.ai_model = model_name
        self._report(f"change the model to: {self.rag_model.ai_model}")


    def set_model_configs(
        self, 
        configs: dict
    ) -> None:
        """Configure model settings."""
        self.db_model.chunk_size = configs["chunk_size"]
        self.rag_model.temperature = configs["temperature"]
        self._report("change the model configs")


    def _report(
        self, 
        event: str
    ) -> None:
        """Show program execution status logs."""
        now = datetime.datetime.now()
        time = now.strftime("%H:%M:%S")
        print(f'{time:8}  {event}\n')